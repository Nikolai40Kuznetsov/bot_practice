import requests
import telebot
from telebot.types import ReplyKeyboardMarkup
from datetime import datetime
import random

BOT_TOKEN = "TOKEN"

bot = telebot.TeleBot(BOT_TOKEN)

keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.row('üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ –ú–∏–Ω—Å–∫–µ –Ω–∞ –Ω–µ–¥–µ–ª—é')
keyboard.row('üí∞ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç')
keyboard.row('üåé –°–ª—É—á–∞–π–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞', 'üìä –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã')
keyboard.row('‚ùì –ü–æ–º–æ—â—å')

def get_weather_minsk():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –≤ –ú–∏–Ω—Å–∫–µ –Ω–∞ 7 –¥–Ω–µ–π —á–µ—Ä–µ–∑ Open-Meteo API"""
    try:
        url = "https://api.open-meteo.com/v1/forecast"
        params = {
            'latitude': 53.9045,
            'longitude': 27.5615,
            'daily': 'temperature_2m_max,temperature_2m_min,weathercode,precipitation_probability',
            'timezone': 'Europe/Minsk',
            'forecast_days': 7
        }
        
        response = requests.get(url, params=params)
        data = response.json()
        
        if 'daily' not in data:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ"
        
        daily = data['daily']
        result = "üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ –ú–∏–Ω—Å–∫–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n"
        
        weather_codes = {
            0: "‚òÄÔ∏è –Ø—Å–Ω–æ",
            1: "üå§Ô∏è –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ",
            2: "‚õÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
            3: "‚òÅÔ∏è –ü–∞—Å–º—É—Ä–Ω–æ",
            45: "üå´Ô∏è –¢—É–º–∞–Ω",
            48: "üå´Ô∏è –ò–Ω–µ–π–Ω—ã–π —Ç—É–º–∞–Ω",
            51: "üåßÔ∏è –õ–µ–≥–∫–∞—è –º–æ—Ä–æ—Å—å",
            53: "üåßÔ∏è –£–º–µ—Ä–µ–Ω–Ω–∞—è –º–æ—Ä–æ—Å—å",
            55: "üåßÔ∏è –°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å",
            61: "üåßÔ∏è –ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å",
            63: "üåßÔ∏è –£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å",
            65: "üåßÔ∏è –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
            80: "üåßÔ∏è –õ–∏–≤–µ–Ω—å",
            81: "üåßÔ∏è –°–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å",
            82: "üåßÔ∏è –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å",
            95: "‚õàÔ∏è –ì—Ä–æ–∑–∞",
            96: "‚õàÔ∏è –ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º",
            99: "‚õàÔ∏è –°–∏–ª—å–Ω–∞—è –≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º"
        }
        
        for i in range(7):
            date = datetime.fromisoformat(daily['time'][i]).strftime('%d.%m.%Y')
            temp_max = daily['temperature_2m_max'][i]
            temp_min = daily['temperature_2m_min'][i]
            weather_code = daily['weathercode'][i]
            precip_prob = daily['precipitation_probability'][i]
            
            weather_desc = weather_codes.get(weather_code, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–≥–æ–¥–∞")
            
            result += f"üìÖ {date}:\n"
            result += f"   üå°Ô∏è {temp_min:.0f}¬∞C - {temp_max:.0f}¬∞C\n"
            result += f"   {weather_desc}\n"
            result += f"   üíß –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {precip_prob}%\n\n"
        
        return result
    
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: {str(e)}"

def get_exchange_rates():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
    try:
        url = "https://api.exchangerate.host/latest"
        params = {
            'base': 'BYN',
            'symbols': 'USD,EUR,RUB,PLN,UAH'
        }
        
        response = requests.get(url, params=params)
        data = response.json()
        
        if not data['success']:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"
        
        rates = data['rates']
        result = "üí∞ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∫ BYN:\n\n"
        
        currency_symbols = {
            'USD': 'üá∫üá∏ –î–æ–ª–ª–∞—Ä –°–®–ê',
            'EUR': 'üá™üá∫ –ï–≤—Ä–æ',
            'RUB': 'üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å',
            'PLN': 'üáµüá± –ü–æ–ª—å—Å–∫–∏–π –∑–ª–æ—Ç—ã–π',
            'UAH': 'üá∫üá¶ –£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –≥—Ä–∏–≤–Ω–∞'
        }
        
        for currency, symbol in currency_symbols.items():
            if currency in rates:
                rate = 1 / rates[currency] 
                result += f"{symbol}:\n"
                result += f"   üí∞ 1 {currency} = {rate:.3f} BYN\n\n"
        
        return result
    
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {str(e)}"

def get_random_country():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ"""
    try:
        response = requests.get("https://restcountries.com/v3.1/all")
        countries = response.json()
        
        country = random.choice(countries)
        
        result = "üåé –°–ª—É—á–∞–π–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞:\n\n"
        result += f"üá∫üá≥ {country.get('name', {}).get('common', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        result += f"üèôÔ∏è –°—Ç–æ–ª–∏—Ü–∞: {', '.join(country.get('capital', ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ']))}\n"
        result += f"üë• –ù–∞—Å–µ–ª–µ–Ω–∏–µ: {country.get('population', 0):,}\n"
        result += f"üìè –ü–ª–æ—â–∞–¥—å: {country.get('area', 0):,} –∫–º¬≤\n"
        result += f"üó∫Ô∏è –†–µ–≥–∏–æ–Ω: {country.get('region', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        
        if country.get('languages'):
            languages = list(country['languages'].values())
            result += f"üó£Ô∏è –Ø–∑—ã–∫–∏: {', '.join(languages[:3])}\n"
        
        return result
    
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞–Ω–µ: {str(e)}"

def get_crypto_prices():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    try:
        url = "https://api.coingecko.com/api/v3/simple/price"
        params = {
            'ids': 'bitcoin,ethereum,binancecoin,cardano,solana',
            'vs_currencies': 'usd',
            'include_24hr_change': 'true'
        }
        
        response = requests.get(url, params=params)
        data = response.json()
        
        result = "üìä –ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:\n\n"
        
        crypto_names = {
            'bitcoin': '‚Çø Bitcoin',
            'ethereum': 'Œû Ethereum',
            'binancecoin': 'BNB Binance Coin',
            'cardano': 'ADA Cardano',
            'solana': 'SOL Solana'
        }
        
        for crypto_id, info in data.items():
            if crypto_id in crypto_names:
                price = info['usd']
                change = info['usd_24h_change']
                change_icon = 'üìà' if change > 0 else 'üìâ'
                
                result += f"{crypto_names[crypto_id]}:\n"
                result += f"   üí∞ ${price:,.2f}\n"
                result += f"   {change_icon} {change:+.1f}% (24—á)\n\n"
        
        return result
    
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {str(e)}"

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    bot.send_message(
        message.chat.id,
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        reply_markup=keyboard
    )

@bot.message_handler(commands=['help'])
def send_help(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏:
üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ –ú–∏–Ω—Å–∫–µ –Ω–∞ –Ω–µ–¥–µ–ª—é - —Ç–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
üí∞ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç - –∫—É—Ä—Å—ã USD, EUR, RUB, PLN, UAH
üåé –°–ª—É—á–∞–π–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ
üìä –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã - –∫—É—Ä—Å—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
"""
    bot.send_message(message.chat.id, help_text)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = message.text
    
    if text == "üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ –ú–∏–Ω—Å–∫–µ –Ω–∞ –Ω–µ–¥–µ–ª—é":
        weather_info = get_weather_minsk()
        bot.send_message(message.chat.id, weather_info)
    
    elif text == "üí∞ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç":
        exchange_info = get_exchange_rates()
        bot.send_message(message.chat.id, exchange_info)
    
    elif text == "üåé –°–ª—É—á–∞–π–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞":
        country_info = get_random_country()
        bot.send_message(message.chat.id, country_info)
    
    elif text == "üìä –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã":
        crypto_info = get_crypto_prices()
        bot.send_message(message.chat.id, crypto_info)
    
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        send_help(message)
    
    else:
        bot.send_message(
            message.chat.id,
            "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
            reply_markup=keyboard
        )

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    bot.infinity_polling()